/**
 * <copyright>
 *
 * Copyright (c) 2002, 2009 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 *
 */
package net.enilink.komma.edit.provider.model;

import java.util.ArrayList;
import java.util.Collection;

import net.enilink.komma.common.notify.INotification;
import net.enilink.komma.common.notify.NotificationSupport;
import net.enilink.komma.edit.provider.ComposedAdapterFactory;
import net.enilink.komma.edit.provider.Disposable;
import net.enilink.komma.edit.provider.IComposeableAdapterFactory;
import net.enilink.komma.edit.provider.IDisposable;
import net.enilink.komma.edit.provider.IEditingDomainItemProvider;
import net.enilink.komma.edit.provider.IItemLabelProvider;
import net.enilink.komma.edit.provider.IItemPropertySource;
import net.enilink.komma.edit.provider.IStructuredItemContentProvider;
import net.enilink.komma.edit.provider.ITableItemLabelProvider;
import net.enilink.komma.edit.provider.ITreeItemContentProvider;
import net.enilink.komma.model.IModel;
import net.enilink.komma.model.IModelSet;
import net.enilink.komma.model.MODELS;
import net.enilink.komma.core.URI;
import net.enilink.komma.core.URIImpl;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances.
 * 
 */
public class ModelItemProviderAdapterFactory extends
		NotificationSupport<INotification> implements
		IComposeableAdapterFactory, IDisposable {
	private URI namespaceUri = URIImpl.createURI(MODELS.NAMESPACE);

	/**
	 * This keeps track of the root adapter factory that delegates to this
	 * adapter factory.
	 * 
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}.
	 * 
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This is used to implement
	 * {@link net.enilink.komma.edit.provider.IDisposable}.
	 */
	protected Disposable disposable = new Disposable();

	/**
	 * This constructs an instance.
	 * 
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(ITableItemLabelProvider.class);
	}

	@Override
	public Object adapt(Object target, Object type) {
		Object adapter = null;
		if (isFactoryForType(type)) {
			if (target instanceof IModel) {
				adapter = createModelAdapter();
			} else if (target instanceof IModelSet) {
				adapter = createModelSetAdapter();
			}
		}
		if (adapter instanceof IDisposable) {
			disposable.add(adapter);
		}
		return adapter;
	}

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.emf.ecore.resource.Resource}.
	 * 
	 */
	public Object createModelAdapter() {
		return new ModelItemProvider(this);
	}

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.emf.ecore.resource.ResourceSet}.
	 * 
	 */
	public Object createModelSetAdapter() {
		return new ModelSetItemProvider(this);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * 
	 */
	public IComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * 
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc --> This implementation returns <code>true</code> if
	 * the object is either the model's package or is an instance object of the
	 * model. <!-- end-user-doc -->
	 * 
	 * @return whether this factory is applicable for the type of the object.
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return (type instanceof URI && namespaceUri.equals(type))
				|| type instanceof Package
				&& getClass().getPackage().equals(type)
				|| type instanceof IModel || type instanceof IModelSet
				|| supportedTypes.contains(type);
	}

	public void dispose() {
		disposable.dispose();
	}
}
